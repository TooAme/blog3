
<a id="gotop" href="#">
  <span>▲</span>
</a>

<!-- Music Player Button -->
<button id="music-player" type="button">
  <span id="music-icon">▶</span>
</button>

<!-- Hidden Audio Element -->
<audio id="background-music" loop preload="auto">
  <source src="<%- config.root %>src/lovesakisong.mp3" type="audio/mpeg">
  Your browser does not support the audio element.
</audio>

<script src="<%- config.root %>js/jquery.imagesloaded.min.js"></script>
<script src="<%- config.root %>js/gallery.js"></script>
<script src="<%- config.root %>js/bootstrap.min.js"></script>
<script src="<%- config.root %>js/jquery.tableofcontents.min.js"></script>
<script src="<%- config.root %>js/tocgenerator.min.js"></script>
<script src="<%- config.root %>js/main.js"></script>
<script src="<%- config.root %>js/search.js"></script>

<!-- Music Player Script -->
<script type="text/javascript">
(function() {
  var musicPlayer = document.getElementById('music-player');
  var backgroundMusic = document.getElementById('background-music');
  var musicIcon = document.getElementById('music-icon');
  var isPlaying = false;

  // 音乐状态管理
  var MUSIC_STATE_KEY = 'hexo_music_state';
  var MUSIC_TIME_KEY = 'hexo_music_time';

  // 保存音乐状态到localStorage
  function saveMusicState() {
    try {
      localStorage.setItem(MUSIC_STATE_KEY, JSON.stringify({
        isPlaying: isPlaying,
        currentTime: backgroundMusic.currentTime,
        volume: backgroundMusic.volume
      }));
    } catch (e) {
      console.log('无法保存音乐状态:', e);
    }
  }

  // 从localStorage恢复音乐状态
  function restoreMusicState() {
    try {
      var savedState = localStorage.getItem(MUSIC_STATE_KEY);
      if (savedState) {
        var state = JSON.parse(savedState);
        backgroundMusic.volume = state.volume || 0.3;

        // 恢复播放位置
        if (state.currentTime) {
          backgroundMusic.currentTime = state.currentTime;
        }

        // 恢复播放状态
        if (state.isPlaying) {
          // 延迟一点再播放，确保音频已加载
          setTimeout(function() {
            playMusic();
          }, 100);
        }
      }
    } catch (e) {
      console.log('无法恢复音乐状态:', e);
    }
  }

  // Initialize music player
  function initMusicPlayer() {
    // Set initial volume
    backgroundMusic.volume = 0.3;

    // 定期保存播放进度
    setInterval(function() {
      if (isPlaying) {
        saveMusicState();
      }
    }, 5000); // 每5秒保存一次

    // 页面卸载时保存状态
    window.addEventListener('beforeunload', function() {
      saveMusicState();
    });

    // Music player click event
    musicPlayer.addEventListener('click', function() {
      if (isPlaying) {
        pauseMusic();
      } else {
        playMusic();
      }
    });

    // Handle music ended event (though it's set to loop)
    backgroundMusic.addEventListener('ended', function() {
      isPlaying = false;
      musicIcon.innerHTML = '▶';
      musicIcon.classList.remove('pause-icon');
      musicPlayer.classList.remove('playing');
      saveMusicState();
    });

    // Handle music error
    backgroundMusic.addEventListener('error', function() {
      console.log('Error loading music file');
      musicPlayer.style.display = 'none';
    });

    // 音频加载完成后恢复状态
    backgroundMusic.addEventListener('loadedmetadata', function() {
      restoreMusicState();
    });
  }

  function playMusic() {
    backgroundMusic.play().then(function() {
      isPlaying = true;
      musicIcon.innerHTML = '⏸';
      musicIcon.classList.add('pause-icon');
      musicPlayer.classList.add('playing');
      saveMusicState();
    }).catch(function(error) {
      console.log('Error playing music:', error);
    });
  }

  function pauseMusic() {
    backgroundMusic.pause();
    isPlaying = false;
    musicIcon.innerHTML = '▶';
    musicIcon.classList.remove('pause-icon');
    musicPlayer.classList.remove('playing');
    saveMusicState();
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMusicPlayer);
  } else {
    initMusicPlayer();
  }
})();
</script>

<!-- Protected Category Script -->
<script type="text/javascript">
(function() {
  // 受保护分类的密码配置
  var protectedPasswords = {
    <% if (theme.protected_categories) { %>
      <% theme.protected_categories.forEach(function(cat, index) { %>
        '<%= cat.name %>': '<%= cat.password %>'<% if (index < theme.protected_categories.length - 1) { %>,<% } %>
      <% }); %>
    <% } %>
  };
  var unlockedCategories = new Set();

  // Initialize protected category functionality
  function initProtectedCategories() {
    // Handle protected category clicks
    document.querySelectorAll('.protected-category').forEach(function(element) {
      element.addEventListener('click', function() {
        var category = this.getAttribute('data-category');
        var panel = document.getElementById(category);

        if (unlockedCategories.has(category)) {
          // Already unlocked, toggle normally
          if (panel.classList.contains('in')) {
            panel.classList.remove('in');
          } else {
            panel.classList.add('in');
          }
        } else {
          // Show password prompt
          panel.classList.add('in');
          var passwordInput = panel.querySelector('.password-input');
          if (passwordInput) {
            passwordInput.focus();
          }
        }
      });
    });

    // Handle unlock button clicks
    document.querySelectorAll('.unlock-btn').forEach(function(button) {
      button.addEventListener('click', function() {
        var category = this.getAttribute('data-category');
        var panel = document.getElementById(category);
        var passwordInput = panel.querySelector('.password-input');
        var password = passwordInput.value;

        if (password === protectedPasswords[category]) {
          // Correct password
          unlockedCategories.add(category);
          panel.querySelector('.password-prompt').style.display = 'none';
          panel.querySelector('.protected-posts').style.display = 'block';

          // Change icon to unlocked
          var categoryLink = document.querySelector('.protected-category[data-category="' + category + '"]');
          if (categoryLink) {
            categoryLink.innerHTML = '<i class="fa fa-folder-open"></i> ' + category;
          }

          // Store unlock status in session
          sessionStorage.setItem('unlocked_' + category, 'true');
        } else {
          // Wrong password
          passwordInput.value = '';
          passwordInput.style.borderColor = '#ff6b6b';
          passwordInput.placeholder = '密码错误，请重试';

          setTimeout(function() {
            passwordInput.style.borderColor = '';
            passwordInput.placeholder = '请输入密码';
          }, 2000);
        }
      });
    });

    // Handle Enter key in password input
    document.querySelectorAll('.password-input').forEach(function(input) {
      input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          var category = this.closest('.protected-content').getAttribute('data-category');
          var unlockBtn = document.querySelector('.unlock-btn[data-category="' + category + '"]');
          if (unlockBtn) {
            unlockBtn.click();
          }
        }
      });
    });

    // Restore unlock status from session
    document.querySelectorAll('.protected-content').forEach(function(panel) {
      var category = panel.getAttribute('data-category');
      if (sessionStorage.getItem('unlocked_' + category) === 'true') {
        unlockedCategories.add(category);
        panel.querySelector('.password-prompt').style.display = 'none';
        panel.querySelector('.protected-posts').style.display = 'block';

        var categoryLink = document.querySelector('.protected-category[data-category="' + category + '"]');
        if (categoryLink) {
          categoryLink.innerHTML = '<i class="fa fa-folder-open"></i> ' + category;
        }
      }
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initProtectedCategories);
  } else {
    initProtectedCategories();
  }
})();
</script>

<% if (config.disqus_shortname){ %>
<script type="text/javascript">
var disqus_shortname = '<%= config.disqus_shortname %>';

(function(){
  var dsq = document.createElement('script');
  dsq.type = 'text/javascript';
  dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/<% if (page.comments){ %>embed.js<% } else { %>count.js<% } %>';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
}());
</script>
<% } %>

<% if (theme.fancybox){ %>
<link rel="stylesheet" href="<%- config.root %>fancybox/jquery.fancybox.css" media="screen" type="text/css">
<script src="<%- config.root %>fancybox/jquery.fancybox.pack.js"></script>
<script type="text/javascript">
(function($){
  $('.fancybox').fancybox();
})(jQuery);
</script>
<% } %>

<% if (config.search) { %>
   <script type="text/javascript">      
     var search_path = "<%= config.search.path %>";
	 if (search_path.length == 0) {
	 	search_path = "search.xml";
	 }
	 var path = "<%= config.root %>" + search_path;
     searchFunc(path, 'local-search-input', 'local-search-result');
   </script>
<% } %>
